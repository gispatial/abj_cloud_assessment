/*! qrcanvas-vue v2.1.0 | ISC License */
this.qrcanvas = this.qrcanvas || {};
(function (exports, Vue, qrcanvas) {
'use strict';

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e['default'] : e; }

var Vue__default = /*#__PURE__*/_interopDefaultLegacy(Vue);

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var Component = {
  props: {
    options: Object
  },
  render: function render(h) {
    var _this$$props = this.$props,
        options = _this$$props.options,
        rest = _objectWithoutPropertiesLoose(_this$$props, ["options"]);

    return h('canvas', rest);
  },
  methods: {
    update: function update(options) {
      // Render only if mounted, skip SSR.
      if (!this.mounted) return;
      this.$emit('beforeUpdate', this.$el);
      qrcanvas.qrcanvas(_extends({}, options, {
        canvas: this.$el
      }));
      this.$emit('updated', this.$el);
    }
  },
  watch: {
    options: 'update'
  },
  mounted: function mounted() {
    this.mounted = true;
    this.update(this.options);
  }
};

var QRCanvas = Vue__default.extend(Component);

exports.Component = Component;
exports.QRCanvas = QRCanvas;

}(this.qrcanvas.vue = this.qrcanvas.vue || {}, Vue, qrcanvas));
