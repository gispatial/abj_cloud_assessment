/*! qrcanvas-vue v2.1.0 | ISC License */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var Vue = require('vue');
var _extends = require('@babel/runtime/helpers/extends');
var _objectWithoutPropertiesLoose = require('@babel/runtime/helpers/objectWithoutPropertiesLoose');
var qrcanvas = require('qrcanvas');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e['default'] : e; }

var Vue__default = /*#__PURE__*/_interopDefaultLegacy(Vue);
var _extends__default = /*#__PURE__*/_interopDefaultLegacy(_extends);
var _objectWithoutPropertiesLoose__default = /*#__PURE__*/_interopDefaultLegacy(_objectWithoutPropertiesLoose);

var Component = {
  props: {
    options: Object
  },
  render: function render(h) {
    var _this$$props = this.$props,
        options = _this$$props.options,
        rest = _objectWithoutPropertiesLoose__default(_this$$props, ["options"]);

    return h('canvas', rest);
  },
  methods: {
    update: function update(options) {
      // Render only if mounted, skip SSR.
      if (!this.mounted) return;
      this.$emit('beforeUpdate', this.$el);
      qrcanvas.qrcanvas(_extends__default({}, options, {
        canvas: this.$el
      }));
      this.$emit('updated', this.$el);
    }
  },
  watch: {
    options: 'update'
  },
  mounted: function mounted() {
    this.mounted = true;
    this.update(this.options);
  }
};

var QRCanvas = Vue__default.extend(Component);

exports.Component = Component;
exports.QRCanvas = QRCanvas;
