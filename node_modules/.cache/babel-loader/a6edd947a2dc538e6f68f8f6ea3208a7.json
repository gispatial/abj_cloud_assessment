{"remainingRequest":"/Users/crocslut/Desktop/abj_cloud_assessment/node_modules/babel-loader/lib/index.js!/Users/crocslut/Desktop/abj_cloud_assessment/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/crocslut/Desktop/abj_cloud_assessment/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/crocslut/Desktop/abj_cloud_assessment/src/components/excel/ImportExcel.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/crocslut/Desktop/abj_cloud_assessment/src/components/excel/ImportExcel.vue","mtime":1634797132078},{"path":"/Users/crocslut/Desktop/abj_cloud_assessment/node_modules/cache-loader/dist/cjs.js","mtime":1634797146168},{"path":"/Users/crocslut/Desktop/abj_cloud_assessment/node_modules/babel-loader/lib/index.js","mtime":1634797145766},{"path":"/Users/crocslut/Desktop/abj_cloud_assessment/node_modules/cache-loader/dist/cjs.js","mtime":1634797146168},{"path":"/Users/crocslut/Desktop/abj_cloud_assessment/node_modules/vue-loader/lib/index.js","mtime":1634797150551}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXM2LmZ1bmN0aW9uLm5hbWUiOwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwppbXBvcnQgWExTWCBmcm9tICd4bHN4JzsKZXhwb3J0IGRlZmF1bHQgewogIHByb3BzOiB7CiAgICBvblN1Y2Nlc3M6IHsKICAgICAgdHlwZTogRnVuY3Rpb24sCiAgICAgIHJlcXVpcmVkOiB0cnVlCiAgICB9CiAgfSwKICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgZXhjZWxEYXRhOiB7CiAgICAgICAgaGVhZGVyOiBudWxsLAogICAgICAgIHJlc3VsdHM6IG51bGwsCiAgICAgICAgbWV0YTogbnVsbAogICAgICB9CiAgICB9OwogIH0sCiAgbWV0aG9kczogewogICAgZ2VuZXJhdGVEYXRhOiBmdW5jdGlvbiBnZW5lcmF0ZURhdGEoX3JlZikgewogICAgICB2YXIgaGVhZGVyID0gX3JlZi5oZWFkZXIsCiAgICAgICAgICByZXN1bHRzID0gX3JlZi5yZXN1bHRzLAogICAgICAgICAgbWV0YSA9IF9yZWYubWV0YTsKICAgICAgdGhpcy5leGNlbERhdGEuaGVhZGVyID0gaGVhZGVyOwogICAgICB0aGlzLmV4Y2VsRGF0YS5yZXN1bHRzID0gcmVzdWx0czsKICAgICAgdGhpcy5leGNlbERhdGEubWV0YSA9IG1ldGE7CiAgICAgIHRoaXMub25TdWNjZXNzICYmIHRoaXMub25TdWNjZXNzKHRoaXMuZXhjZWxEYXRhKTsKICAgIH0sCiAgICBnZXRIZWFkZXJSb3c6IGZ1bmN0aW9uIGdldEhlYWRlclJvdyhzaGVldCkgewogICAgICB2YXIgaGVhZGVycyA9IFtdOwogICAgICB2YXIgcmFuZ2UgPSBYTFNYLnV0aWxzLmRlY29kZV9yYW5nZShzaGVldFsnIXJlZiddKTsKICAgICAgdmFyIEM7CiAgICAgIHZhciBSID0gcmFuZ2Uucy5yOwogICAgICAvKiBzdGFydCBpbiB0aGUgZmlyc3Qgcm93ICovCgogICAgICBmb3IgKEMgPSByYW5nZS5zLmM7IEMgPD0gcmFuZ2UuZS5jOyArK0MpIHsKICAgICAgICAvKiB3YWxrIGV2ZXJ5IGNvbHVtbiBpbiB0aGUgcmFuZ2UgKi8KICAgICAgICB2YXIgY2VsbCA9IHNoZWV0W1hMU1gudXRpbHMuZW5jb2RlX2NlbGwoewogICAgICAgICAgYzogQywKICAgICAgICAgIHI6IFIKICAgICAgICB9KV07CiAgICAgICAgLyogZmluZCB0aGUgY2VsbCBpbiB0aGUgZmlyc3Qgcm93ICovCgogICAgICAgIHZhciBoZHIgPSAnVU5LTk9XTiAnICsgQzsgLy8gPC0tIHJlcGxhY2Ugd2l0aCB5b3VyIGRlc2lyZWQgZGVmYXVsdAoKICAgICAgICBpZiAoY2VsbCAmJiBjZWxsLnQpIGhkciA9IFhMU1gudXRpbHMuZm9ybWF0X2NlbGwoY2VsbCk7CiAgICAgICAgaGVhZGVycy5wdXNoKGhkcik7CiAgICAgIH0KCiAgICAgIHJldHVybiBoZWFkZXJzOwogICAgfSwKICAgIGhhbmRsZURyYWdvdmVyOiBmdW5jdGlvbiBoYW5kbGVEcmFnb3ZlcihlKSB7CiAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7CiAgICAgIGUucHJldmVudERlZmF1bHQoKTsKICAgICAgZS5kYXRhVHJhbnNmZXIuZHJvcEVmZmVjdCA9ICdjb3B5JzsKICAgIH0sCiAgICBoYW5kbGVEcm9wOiBmdW5jdGlvbiBoYW5kbGVEcm9wKGUpIHsKICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTsKICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOwogICAgICB2YXIgZmlsZXMgPSBlLmRhdGFUcmFuc2Zlci5maWxlczsKCiAgICAgIGlmIChmaWxlcy5sZW5ndGggIT09IDEpIHsKICAgICAgICB0aGlzLiR2cy5ub3RpZnkoewogICAgICAgICAgdGl0bGU6ICdMb2dpbiBBdHRlbXB0JywKICAgICAgICAgIHRleHQ6ICdPbmx5IHN1cHBvcnQgdXBsb2FkaW5nIG9uZSBmaWxlIScsCiAgICAgICAgICBpY29uUGFjazogJ2ZlYXRoZXInLAogICAgICAgICAgaWNvbjogJ2ljb24tYWxlcnQtY2lyY2xlJywKICAgICAgICAgIGNvbG9yOiAnd2FybmluZycKICAgICAgICB9KTsKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIHZhciByYXdGaWxlID0gZmlsZXNbMF07IC8vIG9ubHkgdXNlIGZpbGVzWzBdCgogICAgICBpZiAoIXRoaXMuaXNFeGNlbChyYXdGaWxlKSkgewogICAgICAgIHRoaXMuJHZzLm5vdGlmeSh7CiAgICAgICAgICB0aXRsZTogJ0xvZ2luIEF0dGVtcHQnLAogICAgICAgICAgdGV4dDogJ09ubHkgc3VwcG9ydHMgdXBsb2FkIC54bHN4LCAueGxzLCAuY3N2IHN1ZmZpeCBmaWxlcycsCiAgICAgICAgICBpY29uUGFjazogJ2ZlYXRoZXInLAogICAgICAgICAgaWNvbjogJ2ljb24tYWxlcnQtY2lyY2xlJywKICAgICAgICAgIGNvbG9yOiAnd2FybmluZycKICAgICAgICB9KTsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KCiAgICAgIHRoaXMudXBsb2FkRmlsZShyYXdGaWxlKTsKICAgIH0sCiAgICByZWFkZXJEYXRhOiBmdW5jdGlvbiByZWFkZXJEYXRhKHJhd0ZpbGUpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkgewogICAgICAgIHZhciByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpOwoKICAgICAgICByZWFkZXIub25sb2FkID0gZnVuY3Rpb24gKGUpIHsKICAgICAgICAgIHZhciBkYXRhID0gZS50YXJnZXQucmVzdWx0OwogICAgICAgICAgdmFyIHdvcmtib29rID0gWExTWC5yZWFkKGRhdGEsIHsKICAgICAgICAgICAgdHlwZTogJ2FycmF5JwogICAgICAgICAgfSk7CiAgICAgICAgICB2YXIgZmlyc3RTaGVldE5hbWUgPSB3b3JrYm9vay5TaGVldE5hbWVzWzBdOwogICAgICAgICAgdmFyIHdvcmtzaGVldCA9IHdvcmtib29rLlNoZWV0c1tmaXJzdFNoZWV0TmFtZV07CgogICAgICAgICAgdmFyIGhlYWRlciA9IF90aGlzLmdldEhlYWRlclJvdyh3b3Jrc2hlZXQpOwoKICAgICAgICAgIHZhciByZXN1bHRzID0gWExTWC51dGlscy5zaGVldF90b19qc29uKHdvcmtzaGVldCk7CiAgICAgICAgICB2YXIgbWV0YSA9IHsKICAgICAgICAgICAgc2hlZXROYW1lOiBmaXJzdFNoZWV0TmFtZQogICAgICAgICAgfTsKCiAgICAgICAgICBfdGhpcy5nZW5lcmF0ZURhdGEoewogICAgICAgICAgICBoZWFkZXI6IGhlYWRlciwKICAgICAgICAgICAgcmVzdWx0czogcmVzdWx0cywKICAgICAgICAgICAgbWV0YTogbWV0YQogICAgICAgICAgfSk7CgogICAgICAgICAgcmVzb2x2ZSgpOwogICAgICAgIH07CgogICAgICAgIHJlYWRlci5yZWFkQXNBcnJheUJ1ZmZlcihyYXdGaWxlKTsKICAgICAgfSk7CiAgICB9LAogICAgaGFuZGxlQ2xpY2s6IGZ1bmN0aW9uIGhhbmRsZUNsaWNrKGUpIHsKICAgICAgdmFyIGZpbGVzID0gZS50YXJnZXQuZmlsZXM7CiAgICAgIHZhciByYXdGaWxlID0gZmlsZXNbMF07CiAgICAgIGlmICghcmF3RmlsZSkgcmV0dXJuOwogICAgICB0aGlzLnVwbG9hZEZpbGUocmF3RmlsZSk7CiAgICB9LAogICAgaXNFeGNlbDogZnVuY3Rpb24gaXNFeGNlbChmaWxlKSB7CiAgICAgIHJldHVybiAvXC4oeGxzeHx4bHN8Y3N2KSQvLnRlc3QoZmlsZS5uYW1lKTsKICAgIH0sCiAgICB1cGxvYWRGaWxlOiBmdW5jdGlvbiB1cGxvYWRGaWxlKGZpbGUpIHsKICAgICAgdGhpcy4kcmVmc1snZmlsZUlucHV0J10udmFsdWUgPSBudWxsOyAvLyBmaXggY2FuJ3Qgc2VsZWN0IHRoZSBzYW1lIGV4Y2VsCgogICAgICB0aGlzLnJlYWRlckRhdGEoZmlsZSk7CiAgICB9CiAgfQp9Ow=="},{"version":3,"sources":["ImportExcel.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAkBA,OAAA,IAAA,MAAA,MAAA;AAEA,eAAA;AACA,EAAA,KAAA,EAAA;AACA,IAAA,SAAA,EAAA;AACA,MAAA,IAAA,EAAA,QADA;AAEA,MAAA,QAAA,EAAA;AAFA;AADA,GADA;AAOA,EAAA,IAPA,kBAOA;AACA,WAAA;AACA,MAAA,SAAA,EAAA;AACA,QAAA,MAAA,EAAA,IADA;AAEA,QAAA,OAAA,EAAA,IAFA;AAGA,QAAA,IAAA,EAAA;AAHA;AADA,KAAA;AAOA,GAfA;AAgBA,EAAA,OAAA,EAAA;AACA,IAAA,YADA,8BACA;AAAA,UAAA,MAAA,QAAA,MAAA;AAAA,UAAA,OAAA,QAAA,OAAA;AAAA,UAAA,IAAA,QAAA,IAAA;AACA,WAAA,SAAA,CAAA,MAAA,GAAA,MAAA;AACA,WAAA,SAAA,CAAA,OAAA,GAAA,OAAA;AACA,WAAA,SAAA,CAAA,IAAA,GAAA,IAAA;AACA,WAAA,SAAA,IAAA,KAAA,SAAA,CAAA,KAAA,SAAA,CAAA;AACA,KANA;AAOA,IAAA,YAPA,wBAOA,KAPA,EAOA;AACA,UAAA,OAAA,GAAA,EAAA;AACA,UAAA,KAAA,GAAA,IAAA,CAAA,KAAA,CAAA,YAAA,CAAA,KAAA,CAAA,MAAA,CAAA,CAAA;AACA,UAAA,CAAA;AACA,UAAA,CAAA,GAAA,KAAA,CAAA,CAAA,CAAA,CAAA;AACA;;AACA,WAAA,CAAA,GAAA,KAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,IAAA,KAAA,CAAA,CAAA,CAAA,CAAA,EAAA,EAAA,CAAA,EAAA;AAAA;AACA,YAAA,IAAA,GAAA,KAAA,CAAA,IAAA,CAAA,KAAA,CAAA,WAAA,CAAA;AAAA,UAAA,CAAA,EAAA,CAAA;AAAA,UAAA,CAAA,EAAA;AAAA,SAAA,CAAA,CAAA;AACA;;AACA,YAAA,GAAA,GAAA,aAAA,CAAA,CAHA,CAGA;;AACA,YAAA,IAAA,IAAA,IAAA,CAAA,CAAA,EAAA,GAAA,GAAA,IAAA,CAAA,KAAA,CAAA,WAAA,CAAA,IAAA,CAAA;AACA,QAAA,OAAA,CAAA,IAAA,CAAA,GAAA;AACA;;AACA,aAAA,OAAA;AACA,KArBA;AAsBA,IAAA,cAtBA,0BAsBA,CAtBA,EAsBA;AACA,MAAA,CAAA,CAAA,eAAA;AACA,MAAA,CAAA,CAAA,cAAA;AACA,MAAA,CAAA,CAAA,YAAA,CAAA,UAAA,GAAA,MAAA;AACA,KA1BA;AA2BA,IAAA,UA3BA,sBA2BA,CA3BA,EA2BA;AACA,MAAA,CAAA,CAAA,eAAA;AACA,MAAA,CAAA,CAAA,cAAA;AACA,UAAA,KAAA,GAAA,CAAA,CAAA,YAAA,CAAA,KAAA;;AACA,UAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,aAAA,GAAA,CAAA,MAAA,CAAA;AACA,UAAA,KAAA,EAAA,eADA;AAEA,UAAA,IAAA,EAAA,kCAFA;AAGA,UAAA,QAAA,EAAA,SAHA;AAIA,UAAA,IAAA,EAAA,mBAJA;AAKA,UAAA,KAAA,EAAA;AALA,SAAA;AAOA;AACA;;AACA,UAAA,OAAA,GAAA,KAAA,CAAA,CAAA,CAAA,CAdA,CAcA;;AACA,UAAA,CAAA,KAAA,OAAA,CAAA,OAAA,CAAA,EAAA;AACA,aAAA,GAAA,CAAA,MAAA,CAAA;AACA,UAAA,KAAA,EAAA,eADA;AAEA,UAAA,IAAA,EAAA,qDAFA;AAGA,UAAA,QAAA,EAAA,SAHA;AAIA,UAAA,IAAA,EAAA,mBAJA;AAKA,UAAA,KAAA,EAAA;AALA,SAAA;AAOA,eAAA,KAAA;AACA;;AACA,WAAA,UAAA,CAAA,OAAA;AACA,KArDA;AAsDA,IAAA,UAtDA,sBAsDA,OAtDA,EAsDA;AAAA;;AACA,aAAA,IAAA,OAAA,CAAA,UAAA,OAAA,EAAA;AACA,YAAA,MAAA,GAAA,IAAA,UAAA,EAAA;;AACA,QAAA,MAAA,CAAA,MAAA,GAAA,UAAA,CAAA,EAAA;AACA,cAAA,IAAA,GAAA,CAAA,CAAA,MAAA,CAAA,MAAA;AACA,cAAA,QAAA,GAAA,IAAA,CAAA,IAAA,CAAA,IAAA,EAAA;AAAA,YAAA,IAAA,EAAA;AAAA,WAAA,CAAA;AACA,cAAA,cAAA,GAAA,QAAA,CAAA,UAAA,CAAA,CAAA,CAAA;AACA,cAAA,SAAA,GAAA,QAAA,CAAA,MAAA,CAAA,cAAA,CAAA;;AACA,cAAA,MAAA,GAAA,KAAA,CAAA,YAAA,CAAA,SAAA,CAAA;;AACA,cAAA,OAAA,GAAA,IAAA,CAAA,KAAA,CAAA,aAAA,CAAA,SAAA,CAAA;AACA,cAAA,IAAA,GAAA;AAAA,YAAA,SAAA,EAAA;AAAA,WAAA;;AACA,UAAA,KAAA,CAAA,YAAA,CAAA;AAAA,YAAA,MAAA,EAAA,MAAA;AAAA,YAAA,OAAA,EAAA,OAAA;AAAA,YAAA,IAAA,EAAA;AAAA,WAAA;;AACA,UAAA,OAAA;AACA,SAVA;;AAWA,QAAA,MAAA,CAAA,iBAAA,CAAA,OAAA;AACA,OAdA,CAAA;AAeA,KAtEA;AAuEA,IAAA,WAvEA,uBAuEA,CAvEA,EAuEA;AACA,UAAA,KAAA,GAAA,CAAA,CAAA,MAAA,CAAA,KAAA;AACA,UAAA,OAAA,GAAA,KAAA,CAAA,CAAA,CAAA;AACA,UAAA,CAAA,OAAA,EAAA;AACA,WAAA,UAAA,CAAA,OAAA;AACA,KA5EA;AA6EA,IAAA,OA7EA,mBA6EA,IA7EA,EA6EA;AACA,aAAA,oBAAA,IAAA,CAAA,IAAA,CAAA,IAAA,CAAA;AACA,KA/EA;AAgFA,IAAA,UAhFA,sBAgFA,IAhFA,EAgFA;AACA,WAAA,KAAA,CAAA,WAAA,EAAA,KAAA,GAAA,IAAA,CADA,CACA;;AACA,WAAA,UAAA,CAAA,IAAA;AACA;AAnFA;AAhBA,CAAA","sourcesContent":["<template>\n  <div class=\"excel-import\">\n    <input type=\"file\" ref=\"fileInput\" class=\"hidden\" accept=\".xlsx, .xls\" @change=\"handleClick\">\n    <div\n      @click=\"$refs.fileInput.click()\"\n      @drop=\"handleDrop\"\n      @dragover=\"handleDragover\"\n      @dragenter=\"handleDragover\"\n      class=\"px-8 py-16 cursor-pointer text-center border-2 border-dashed d-theme-border-grey-light d-theme-dark-bg text-xl\">\n      <feather-icon icon=\"UploadCloudIcon\" svgClasses=\"h-16 w-16 stroke-current text-grey\" class=\"block\" />\n      <span>Drop Excel File or </span>\n      <span class=\"font-medium text-primary\" @click.stop=\"$refs.fileInput.click()\">Browse</span>\n      <!-- <vs-button type=\"border\" @click.stop=\"$refs.fileInput.click()\">Browse</vs-button> -->\n    </div>\n  </div>\n</template>\n\n<script>\nimport XLSX from 'xlsx'\n\nexport default {\n  props: {\n    onSuccess: {\n      type: Function,\n      required: true\n    }\n  },\n  data() {\n    return {\n      excelData: {\n        header: null,\n        results: null,\n        meta: null,\n      }\n    }\n  },\n  methods: {\n    generateData({ header, results, meta }) {\n      this.excelData.header = header\n      this.excelData.results = results\n      this.excelData.meta = meta\n      this.onSuccess && this.onSuccess(this.excelData)\n    },\n    getHeaderRow(sheet) {\n      const headers = []\n      const range = XLSX.utils.decode_range(sheet['!ref'])\n      let C\n      const R = range.s.r\n      /* start in the first row */\n      for (C = range.s.c; C <= range.e.c; ++C) { /* walk every column in the range */\n        const cell = sheet[XLSX.utils.encode_cell({ c: C, r: R })]\n        /* find the cell in the first row */\n        let hdr = 'UNKNOWN ' + C // <-- replace with your desired default\n        if (cell && cell.t) hdr = XLSX.utils.format_cell(cell)\n        headers.push(hdr)\n      }\n      return headers\n    },\n    handleDragover(e) {\n      e.stopPropagation()\n      e.preventDefault()\n      e.dataTransfer.dropEffect = 'copy'\n    },\n    handleDrop(e) {\n      e.stopPropagation()\n      e.preventDefault()\n      const files = e.dataTransfer.files\n      if (files.length !== 1) {\n        this.$vs.notify({\n            title: 'Login Attempt',\n            text: 'Only support uploading one file!',\n            iconPack: 'feather',\n            icon: 'icon-alert-circle',\n            color: 'warning'\n        })\n        return\n      }\n      const rawFile = files[0] // only use files[0]\n      if (!this.isExcel(rawFile)) {\n        this.$vs.notify({\n            title: 'Login Attempt',\n            text: 'Only supports upload .xlsx, .xls, .csv suffix files',\n            iconPack: 'feather',\n            icon: 'icon-alert-circle',\n            color: 'warning'\n        })\n        return false\n      }\n      this.uploadFile(rawFile)\n    },\n    readerData(rawFile) {\n      return new Promise((resolve) => {\n        const reader = new FileReader()\n        reader.onload = e => {\n          const data = e.target.result\n          const workbook = XLSX.read(data, { type: 'array' })\n          const firstSheetName = workbook.SheetNames[0]\n          const worksheet = workbook.Sheets[firstSheetName]\n          const header = this.getHeaderRow(worksheet)\n          const results = XLSX.utils.sheet_to_json(worksheet)\n          const meta = { sheetName: firstSheetName }\n          this.generateData({ header, results, meta })\n          resolve()\n        }\n        reader.readAsArrayBuffer(rawFile)\n      })\n    },\n    handleClick(e) {\n      const files = e.target.files\n      const rawFile = files[0]\n      if (!rawFile) return\n      this.uploadFile(rawFile)\n    },\n    isExcel(file) {\n      return /\\.(xlsx|xls|csv)$/.test(file.name)\n    },\n    uploadFile(file) {\n      this.$refs['fileInput'].value = null // fix can't select the same excel\n      this.readerData(file)\n    }\n\n  }\n}\n</script>\n"],"sourceRoot":"src/components/excel"}]}