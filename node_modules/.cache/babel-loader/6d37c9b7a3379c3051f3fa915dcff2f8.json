{"remainingRequest":"/Users/crocslut/Documents/Git/abj_cloud_assessment/node_modules/babel-loader/lib/index.js!/Users/crocslut/Documents/Git/abj_cloud_assessment/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/crocslut/Documents/Git/abj_cloud_assessment/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/crocslut/Documents/Git/abj_cloud_assessment/src/views/apps/user/user-list/cell-renderer/CellRendererStatus.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/crocslut/Documents/Git/abj_cloud_assessment/src/views/apps/user/user-list/cell-renderer/CellRendererStatus.vue","mtime":1634372945944},{"path":"/Users/crocslut/Documents/Git/abj_cloud_assessment/node_modules/cache-loader/dist/cjs.js","mtime":1634370900025},{"path":"/Users/crocslut/Documents/Git/abj_cloud_assessment/node_modules/babel-loader/lib/index.js","mtime":1634273594024},{"path":"/Users/crocslut/Documents/Git/abj_cloud_assessment/node_modules/cache-loader/dist/cjs.js","mtime":1634370900025},{"path":"/Users/crocslut/Documents/Git/abj_cloud_assessment/node_modules/vue-loader/lib/index.js","mtime":1634373319752}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICdDZWxsUmVuZGVyZXJTdGF0dXMnLAogIGNvbXB1dGVkOiB7CiAgICBjaGlwQ29sb3I6IGZ1bmN0aW9uIGNoaXBDb2xvcigpIHsKICAgICAgcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSkgewogICAgICAgIGlmICh2YWx1ZSA9PT0gImFjdGl2ZSIpIHJldHVybiAic3VjY2VzcyI7ZWxzZSBpZiAodmFsdWUgPT09ICJibG9ja2VkIikgcmV0dXJuICJkYW5nZXIiO2Vsc2UgaWYgKHZhbHVlID09PSAiZGVhY3RpdmF0ZWQiKSByZXR1cm4gIndhcm5pbmciO2Vsc2UgInByaW1hcnkiOwogICAgICB9OwogICAgfQogIH0KfTs="},{"version":3,"sources":["CellRendererStatus.vue"],"names":[],"mappings":";;;;;;AAOA,eAAA;AACA,EAAA,IAAA,EAAA,oBADA;AAEA,EAAA,QAAA,EAAA;AACA,IAAA,SADA,uBACA;AACA,aAAA,UAAA,KAAA,EAAA;AACA,YAAA,KAAA,KAAA,QAAA,EAAA,OAAA,SAAA,CAAA,KACA,IAAA,KAAA,KAAA,SAAA,EAAA,OAAA,QAAA,CAAA,KACA,IAAA,KAAA,KAAA,aAAA,EAAA,OAAA,SAAA,CAAA,KACA;AACA,OALA;AAMA;AARA;AAFA,CAAA","sourcesContent":["<template>\n    <vs-chip class=\"ag-grid-cell-chip\" :color=\"chipColor(params.value)\">\n      <span>{{ params.value }}</span>\n    </vs-chip>\n</template>\n\n<script>\n    export default {\n        name: 'CellRendererStatus',\n        computed: {\n          chipColor() {\n            return (value) => {\n              if(value === \"active\") return \"success\"\n              else if(value === \"blocked\") return \"danger\"\n              else if(value === \"deactivated\") return \"warning\"\n              else \"primary\"\n            }\n          }\n        }\n    }\n</script>\n\n<style lang=\"scss\" scpoped>\n.ag-grid-cell-chip {\n  &.vs-chip-success {\n    background: rgba(var(--vs-success),.15);\n    color: rgba(var(--vs-success),1) !important;\n    font-weight: 500;\n  }\n  &.vs-chip-warning {\n    background: rgba(var(--vs-warning),.15);\n    color: rgba(var(--vs-warning),1) !important;\n    font-weight: 500;\n  }\n  &.vs-chip-danger {\n    background: rgba(var(--vs-danger),.15);\n    color: rgba(var(--vs-danger),1) !important;\n    font-weight: 500;\n  }\n}\n</style>\n"],"sourceRoot":"src/views/apps/user/user-list/cell-renderer"}]}