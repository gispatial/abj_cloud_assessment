{"remainingRequest":"/Users/crocslut/Desktop/abj_cloud_assessment/node_modules/babel-loader/lib/index.js!/Users/crocslut/Desktop/abj_cloud_assessment/src/fake-db/data/user/index.js","dependencies":[{"path":"/Users/crocslut/Desktop/abj_cloud_assessment/src/fake-db/data/user/index.js","mtime":1634372945927},{"path":"/Users/crocslut/Desktop/abj_cloud_assessment/node_modules/cache-loader/dist/cjs.js","mtime":1634370900025},{"path":"/Users/crocslut/Desktop/abj_cloud_assessment/node_modules/babel-loader/lib/index.js","mtime":1634273594024}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZpbmQiOwppbXBvcnQgbW9jayBmcm9tICdAL2Zha2UtZGIvbW9jay5qcyc7CmltcG9ydCBqd3QgZnJvbSAnanNvbndlYnRva2VuJzsKdmFyIGRhdGEgPSB7CiAgY2hlY2twb2ludFJld2FyZDogewogICAgdXNlck5hbWU6ICdNZXJjaGFudCcsCiAgICBwcm9ncmVzczogJzU3LjYlJwogIH0sCiAgdXNlcnM6IFt7CiAgICB1aWQ6IDM0LAogICAgZGlzcGxheU5hbWU6ICdIb3dhcmQgUG90dHMnLAogICAgcGFzc3dvcmQ6ICdhZG1pbmFkbWluJywKICAgIHBob3RvVVJMOiByZXF1aXJlKCdAL2Fzc2V0cy9pbWFnZXMvcG9ydHJhaXQvc21hbGwvYXZhdGFyLXMtNS5qcGcnKSwKICAgIGVtYWlsOiAnYWRtaW5AYWRtaW4uY29tJywKICAgIHBob25lTnVtYmVyOiBudWxsCiAgfV0KfTsKdmFyIGp3dENvbmZpZyA9IHsKICAnc2VjcmV0JzogJ2RkNWYzMDg5LTQwYzMtNDAzZC1hZjE0LWQwYzIyOGIwNWNiNCcsCiAgJ2V4cGlyZVRpbWUnOiA4MDAwCn07Cm1vY2sub25Qb3N0KCcvYXBpL2F1dGgvbG9naW4nKS5yZXBseShmdW5jdGlvbiAocmVxdWVzdCkgewogIHZhciBfSlNPTiRwYXJzZSA9IEpTT04ucGFyc2UocmVxdWVzdC5kYXRhKSwKICAgICAgZW1haWwgPSBfSlNPTiRwYXJzZS5lbWFpbCwKICAgICAgcGFzc3dvcmQgPSBfSlNPTiRwYXJzZS5wYXNzd29yZDsKCiAgdmFyIGVycm9yID0gJ1NvbWV0aGluZyB3ZW50IHdyb25nJzsKICB2YXIgdXNlciA9IGRhdGEudXNlcnMuZmluZChmdW5jdGlvbiAodXNlcikgewogICAgcmV0dXJuIHVzZXIuZW1haWwgPT09IGVtYWlsICYmIHVzZXIucGFzc3dvcmQgPT09IHBhc3N3b3JkOwogIH0pOwoKICBpZiAodXNlcikgewogICAgdHJ5IHsKICAgICAgdmFyIGFjY2Vzc1Rva2VuID0gand0LnNpZ24oewogICAgICAgIGlkOiB1c2VyLnVpZAogICAgICB9LCBqd3RDb25maWcuc2VjcmV0LCB7CiAgICAgICAgZXhwaXJlc0luOiBqd3RDb25maWcuZXhwaXJlVGltZQogICAgICB9KTsKICAgICAgdmFyIHVzZXJEYXRhID0gT2JqZWN0LmFzc2lnbih7fSwgdXNlciwgewogICAgICAgIHByb3ZpZGVySWQ6ICdqd3QnCiAgICAgIH0pOwogICAgICBkZWxldGUgdXNlckRhdGEucGFzc3dvcmQ7CiAgICAgIHZhciByZXNwb25zZSA9IHsKICAgICAgICB1c2VyRGF0YTogdXNlckRhdGEsCiAgICAgICAgYWNjZXNzVG9rZW46IGFjY2Vzc1Rva2VuCiAgICAgIH07CiAgICAgIHJldHVybiBbMjAwLCByZXNwb25zZV07CiAgICB9IGNhdGNoIChlKSB7CiAgICAgIGVycm9yID0gZTsKICAgIH0KICB9IGVsc2UgewogICAgZXJyb3IgPSAnRW1haWwgT3IgUGFzc3dvcmQgSW52YWxpZCc7CiAgfQoKICByZXR1cm4gWzIwMCwgewogICAgZXJyb3I6IGVycm9yCiAgfV07Cn0pOwptb2NrLm9uUG9zdCgnL2FwaS9hdXRoL3JlZ2lzdGVyJykucmVwbHkoZnVuY3Rpb24gKHJlcXVlc3QpIHsKICB2YXIgX0pTT04kcGFyc2UyID0gSlNPTi5wYXJzZShyZXF1ZXN0LmRhdGEpLAogICAgICBkaXNwbGF5TmFtZSA9IF9KU09OJHBhcnNlMi5kaXNwbGF5TmFtZSwKICAgICAgZW1haWwgPSBfSlNPTiRwYXJzZTIuZW1haWwsCiAgICAgIHBhc3N3b3JkID0gX0pTT04kcGFyc2UyLnBhc3N3b3JkOwoKICB2YXIgaXNFbWFpbEFscmVhZHlJblVzZSA9IGRhdGEudXNlcnMuZmluZChmdW5jdGlvbiAodXNlcikgewogICAgcmV0dXJuIHVzZXIuZW1haWwgPT09IGVtYWlsOwogIH0pOwogIHZhciBlcnJvciA9IHsKICAgIGVtYWlsOiBpc0VtYWlsQWxyZWFkeUluVXNlID8gJ1RoaXMgZW1haWwgaXMgYWxyZWFkeSBpbiB1c2UuJyA6IG51bGwsCiAgICBkaXNwbGF5TmFtZTogZGlzcGxheU5hbWUgPT09ICcnID8gJ1BsZWFzZSBlbnRlciB5b3VyIG5hbWUuJyA6IG51bGwKICB9OwoKICBpZiAoIWVycm9yLmRpc3BsYXlOYW1lICYmICFlcnJvci5lbWFpbCkgewogICAgdmFyIHVzZXJEYXRhID0gewogICAgICBlbWFpbDogZW1haWwsCiAgICAgIHBhc3N3b3JkOiBwYXNzd29yZCwKICAgICAgZGlzcGxheU5hbWU6IGRpc3BsYXlOYW1lLAogICAgICBwaG90b1VSTDogcmVxdWlyZSgnQC9hc3NldHMvaW1hZ2VzL3BvcnRyYWl0L3NtYWxsL2F2YXRhci1zLTUuanBnJyksCiAgICAgIHBob25lTnVtYmVyOiBudWxsCiAgICB9OyAvLyBBZGQgdXNlciBpZAoKICAgIHZhciBsZW5ndGggPSBkYXRhLnVzZXJzLmxlbmd0aDsKICAgIHZhciBsYXN0SW5kZXggPSAwOwoKICAgIGlmIChsZW5ndGgpIHsKICAgICAgbGFzdEluZGV4ID0gZGF0YS51c2Vyc1tsZW5ndGggLSAxXS51aWQ7CiAgICB9CgogICAgdXNlckRhdGEudWlkID0gbGFzdEluZGV4ICsgMTsKICAgIGRhdGEudXNlcnMucHVzaCh1c2VyRGF0YSk7CiAgICB2YXIgYWNjZXNzVG9rZW4gPSBqd3Quc2lnbih7CiAgICAgIGlkOiB1c2VyRGF0YS51aWQKICAgIH0sIGp3dENvbmZpZy5zZWNyZXQsIHsKICAgICAgZXhwaXJlc0luOiBqd3RDb25maWcuZXhwaXJlVGltZQogICAgfSk7CiAgICB2YXIgdXNlciA9IE9iamVjdC5hc3NpZ24oe30sIHVzZXJEYXRhKTsKICAgIGRlbGV0ZSB1c2VyWydwYXNzd29yZCddOwogICAgdmFyIHJlc3BvbnNlID0gewogICAgICB1c2VyRGF0YTogdXNlciwKICAgICAgYWNjZXNzVG9rZW46IGFjY2Vzc1Rva2VuCiAgICB9OwogICAgcmV0dXJuIFsyMDAsIHJlc3BvbnNlXTsKICB9IGVsc2UgewogICAgcmV0dXJuIFsyMDAsIHsKICAgICAgZXJyb3I6IGVycm9yCiAgICB9XTsKICB9Cn0pOwptb2NrLm9uUG9zdCgnL2FwaS9hdXRoL3JlZnJlc2gtdG9rZW4nKS5yZXBseShmdW5jdGlvbiAocmVxdWVzdCkgewogIHZhciBfSlNPTiRwYXJzZTMgPSBKU09OLnBhcnNlKHJlcXVlc3QuZGF0YSksCiAgICAgIGFjY2Vzc1Rva2VuID0gX0pTT04kcGFyc2UzLmFjY2Vzc1Rva2VuOwoKICB0cnkgewogICAgdmFyIF9qd3QkdmVyaWZ5ID0gand0LnZlcmlmeShhY2Nlc3NUb2tlbiwgand0Q29uZmlnLnNlY3JldCksCiAgICAgICAgaWQgPSBfand0JHZlcmlmeS5pZDsKCiAgICB2YXIgdXNlckRhdGEgPSBPYmplY3QuYXNzaWduKHt9LCBkYXRhLnVzZXJzLmZpbmQoZnVuY3Rpb24gKHVzZXIpIHsKICAgICAgcmV0dXJuIHVzZXIudWlkID09PSBpZDsKICAgIH0pKTsKICAgIHZhciBuZXdBY2Nlc3NUb2tlbiA9IGp3dC5zaWduKHsKICAgICAgaWQ6IHVzZXJEYXRhLnVpZAogICAgfSwgand0Q29uZmlnLnNlY3JldCwgewogICAgICBleHBpcmVzSW46IGp3dENvbmZpZy5leHBpcmVzSW4KICAgIH0pOwogICAgZGVsZXRlIHVzZXJEYXRhWydwYXNzd29yZCddOwogICAgdmFyIHJlc3BvbnNlID0gewogICAgICB1c2VyRGF0YTogdXNlckRhdGEsCiAgICAgIGFjY2Vzc1Rva2VuOiBuZXdBY2Nlc3NUb2tlbgogICAgfTsKICAgIHJldHVybiBbMjAwLCByZXNwb25zZV07CiAgfSBjYXRjaCAoZSkgewogICAgdmFyIGVycm9yID0gJ0ludmFsaWQgYWNjZXNzIHRva2VuJzsKICAgIHJldHVybiBbNDAxLCB7CiAgICAgIGVycm9yOiBlcnJvcgogICAgfV07CiAgfQp9KTsKbW9jay5vbkdldCgnL2FwaS91c2VyL2NoZWNrcG9pbnQtcmV3YXJkJykucmVwbHkoZnVuY3Rpb24gKCkgewogIHJldHVybiBbMjAwLCBkYXRhLmNoZWNrcG9pbnRSZXdhcmRdOwp9KTs="},{"version":3,"sources":["/Users/crocslut/Desktop/abj_cloud_assessment/src/fake-db/data/user/index.js"],"names":["mock","jwt","data","checkpointReward","userName","progress","users","uid","displayName","password","photoURL","require","email","phoneNumber","jwtConfig","onPost","reply","request","JSON","parse","error","user","find","accessToken","sign","id","secret","expiresIn","expireTime","userData","Object","assign","providerId","response","e","isEmailAlreadyInUse","length","lastIndex","push","verify","newAccessToken","onGet"],"mappings":"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","sourcesContent":["import mock from '@/fake-db/mock.js'\nimport jwt from 'jsonwebtoken'\n\nconst data = {\n  checkpointReward: {\n    userName: 'Merchant',\n    progress: '57.6%'\n  },\n  users: [\n    {\n      uid: 34,\n      displayName: 'Howard Potts',\n      password: 'adminadmin',\n      photoURL: require('@/assets/images/portrait/small/avatar-s-5.jpg'),\n      email: 'admin@admin.com',\n      phoneNumber: null\n    }\n  ]\n}\n\n\nconst jwtConfig = {\n  'secret'   : 'dd5f3089-40c3-403d-af14-d0c228b05cb4',\n  'expireTime': 8000\n}\n\n\nmock.onPost('/api/auth/login').reply((request) => {\n  const {email, password} = JSON.parse(request.data)\n\n  let error = 'Something went wrong'\n\n  const user = data.users.find(user => user.email === email && user.password === password)\n\n  if (user) {\n\n    try {\n\n      const accessToken = jwt.sign({id: user.uid}, jwtConfig.secret, {expiresIn: jwtConfig.expireTime})\n\n      const userData = Object.assign({}, user, {providerId: 'jwt'})\n\n      delete userData.password\n\n      const response = {\n        userData,\n        accessToken\n      }\n\n      return [200, response]\n\n    } catch (e) {\n      error = e\n    }\n  } else {\n    error = 'Email Or Password Invalid'\n  }\n\n  return [200, {error}]\n\n\n})\n\nmock.onPost('/api/auth/register').reply((request) => {\n  const {displayName, email, password} = JSON.parse(request.data)\n  const isEmailAlreadyInUse = data.users.find((user) => user.email === email)\n  const error = {\n    email      : isEmailAlreadyInUse ? 'This email is already in use.' : null,\n    displayName: displayName === '' ? 'Please enter your name.' : null\n  }\n\n  if (!error.displayName && !error.email) {\n\n    const userData = {\n      email,\n      password,\n      displayName,\n      photoURL: require('@/assets/images/portrait/small/avatar-s-5.jpg'),\n      phoneNumber: null\n    }\n\n    // Add user id\n    const length = data.users.length\n    let lastIndex = 0\n    if (length) {\n      lastIndex = data.users[length - 1].uid\n    }\n    userData.uid = lastIndex + 1\n\n    data.users.push(userData)\n\n    const accessToken = jwt.sign({id: userData.uid}, jwtConfig.secret, {expiresIn: jwtConfig.expireTime})\n\n    const user = Object.assign({}, userData)\n    delete user['password']\n    const response = {\n      userData: user,\n      accessToken\n    }\n\n    return [200, response]\n  } else {\n    return [200, {error}]\n  }\n})\n\n\nmock.onPost('/api/auth/refresh-token').reply((request) => {\n\n  const {accessToken} = JSON.parse(request.data)\n\n  try {\n    const {id} = jwt.verify(accessToken, jwtConfig.secret)\n\n    const userData = Object.assign({}, data.users.find(user => user.uid === id))\n\n    const newAccessToken = jwt.sign({id: userData.uid}, jwtConfig.secret, {expiresIn: jwtConfig.expiresIn})\n\n    delete userData['password']\n    const response = {\n      userData,\n      accessToken: newAccessToken\n    }\n\n    return [200, response]\n  } catch (e) {\n    const error = 'Invalid access token'\n    return [401, {error}]\n  }\n})\n\n\nmock.onGet('/api/user/checkpoint-reward').reply(() => {\n  return [200, data.checkpointReward]\n})\n"]}]}