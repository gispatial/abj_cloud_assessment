{"remainingRequest":"/Users/crocslut/Desktop/abj_cloud_assessment/node_modules/babel-loader/lib/index.js!/Users/crocslut/Desktop/abj_cloud_assessment/src/fake-db/data/card/card-statistics.js","dependencies":[{"path":"/Users/crocslut/Desktop/abj_cloud_assessment/src/fake-db/data/card/card-statistics.js","mtime":1634372945927},{"path":"/Users/crocslut/Desktop/abj_cloud_assessment/node_modules/cache-loader/dist/cjs.js","mtime":1634370900025},{"path":"/Users/crocslut/Desktop/abj_cloud_assessment/node_modules/babel-loader/lib/index.js","mtime":1634273594024}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IG1vY2sgZnJvbSAnQC9mYWtlLWRiL21vY2suanMnOwp2YXIgZGF0YSA9IHsKICBzdWJzY3JpYmVyc19nYWluZWQ6IHsKICAgIHNlcmllczogW3sKICAgICAgbmFtZTogJ1N1YnNjcmliZXJzJywKICAgICAgZGF0YTogWzI4LCA0MCwgMzYsIDUyLCAzOCwgNjAsIDU1XQogICAgfV0sCiAgICBhbmFseXRpY3NEYXRhOiB7CiAgICAgIHN1YnNjcmliZXJzOiA5MjYwMAogICAgfQogIH0sCiAgcmV2ZW51ZUdlbmVyYXRlZDogewogICAgc2VyaWVzOiBbewogICAgICBuYW1lOiAnUmV2ZW51ZScsCiAgICAgIGRhdGE6IFszNTAsIDI3NSwgNDAwLCAzMDAsIDM1MCwgMzAwLCA0NTBdCiAgICB9XSwKICAgIGFuYWx5dGljc0RhdGE6IHsKICAgICAgcmV2ZW51ZTogOTc1MDAKICAgIH0KICB9LAogIHF1YXJ0ZXJseVNhbGVzOiB7CiAgICBzZXJpZXM6IFt7CiAgICAgIG5hbWU6ICdTYWxlcycsCiAgICAgIGRhdGE6IFsxMCwgMTUsIDcsIDEyLCAzLCAxNl0KICAgIH1dLAogICAgYW5hbHl0aWNzRGF0YTogewogICAgICBzYWxlczogJzM2JScKICAgIH0KICB9LAogIG9yZGVyc1JlY2V2aWVkOiB7CiAgICBzZXJpZXM6IFt7CiAgICAgIG5hbWU6ICdPcmRlcnMnLAogICAgICBkYXRhOiBbMTAsIDE1LCA4LCAxNSwgNywgMTIsIDhdCiAgICB9XSwKICAgIGFuYWx5dGljc0RhdGE6IHsKICAgICAgb3JkZXJzOiA5NzUwMAogICAgfQogIH0sCiAgc2l0ZVRyYWZmaWM6IHsKICAgIHNlcmllczogW3sKICAgICAgbmFtZTogJ1RyYWZmaWMgUmF0ZScsCiAgICAgIGRhdGE6IFsxNTAsIDIwMCwgMTI1LCAyMjUsIDIwMCwgMjUwXQogICAgfV0KICB9LAogIGFjdGl2ZVVzZXJzOiB7CiAgICBzZXJpZXM6IFt7CiAgICAgIG5hbWU6ICdBY3RpdmUgVXNlcnMnLAogICAgICBkYXRhOiBbNzUwLCAxMDAwLCA5MDAsIDEyNTAsIDEwMDAsIDEyMDAsIDExMDBdCiAgICB9XQogIH0sCiAgbmV3c2xldHRlcjogewogICAgc2VyaWVzOiBbewogICAgICBuYW1lOiAnTmV3c2xldHRlcicsCiAgICAgIGRhdGE6IFszNjUsIDM5MCwgMzY1LCA0MDAsIDM3NSwgNDAwXQogICAgfV0KICB9Cn07Cm1vY2sub25HZXQoJy9hcGkvY2FyZC9jYXJkLXN0YXRpc3RpY3Mvc3Vic2NyaWJlcnMnKS5yZXBseShmdW5jdGlvbiAoKSB7CiAgcmV0dXJuIFsyMDAsIGRhdGEuc3Vic2NyaWJlcnNfZ2FpbmVkXTsKfSk7Cm1vY2sub25HZXQoJy9hcGkvY2FyZC9jYXJkLXN0YXRpc3RpY3MvcmV2ZW51ZScpLnJlcGx5KGZ1bmN0aW9uICgpIHsKICByZXR1cm4gWzIwMCwgZGF0YS5yZXZlbnVlR2VuZXJhdGVkXTsKfSk7Cm1vY2sub25HZXQoJy9hcGkvY2FyZC9jYXJkLXN0YXRpc3RpY3Mvc2FsZXMnKS5yZXBseShmdW5jdGlvbiAoKSB7CiAgcmV0dXJuIFsyMDAsIGRhdGEucXVhcnRlcmx5U2FsZXNdOwp9KTsKbW9jay5vbkdldCgnL2FwaS9jYXJkL2NhcmQtc3RhdGlzdGljcy9vcmRlcnMnKS5yZXBseShmdW5jdGlvbiAoKSB7CiAgcmV0dXJuIFsyMDAsIGRhdGEub3JkZXJzUmVjZXZpZWRdOwp9KTsKbW9jay5vbkdldCgnL2FwaS9jYXJkL2NhcmQtc3RhdGlzdGljcy9zaXRlLXRyYWZmaWMnKS5yZXBseShmdW5jdGlvbiAoKSB7CiAgcmV0dXJuIFsyMDAsIGRhdGEuc2l0ZVRyYWZmaWNdOwp9KTsKbW9jay5vbkdldCgnL2FwaS9jYXJkL2NhcmQtc3RhdGlzdGljcy9hY3RpdmUtdXNlcnMnKS5yZXBseShmdW5jdGlvbiAoKSB7CiAgcmV0dXJuIFsyMDAsIGRhdGEuYWN0aXZlVXNlcnNdOwp9KTsKbW9jay5vbkdldCgnL2FwaS9jYXJkL2NhcmQtc3RhdGlzdGljcy9uZXdzbGV0dGVyJykucmVwbHkoZnVuY3Rpb24gKCkgewogIHJldHVybiBbMjAwLCBkYXRhLm5ld3NsZXR0ZXJdOwp9KTs="},{"version":3,"sources":["/Users/crocslut/Desktop/abj_cloud_assessment/src/fake-db/data/card/card-statistics.js"],"names":["mock","data","subscribers_gained","series","name","analyticsData","subscribers","revenueGenerated","revenue","quarterlySales","sales","ordersRecevied","orders","siteTraffic","activeUsers","newsletter","onGet","reply"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,mBAAjB;AAEA,IAAMC,IAAI,GAAG;AACXC,EAAAA,kBAAkB,EAAE;AAClBC,IAAAA,MAAM,EAAE,CACN;AACEC,MAAAA,IAAI,EAAE,aADR;AAEEH,MAAAA,IAAI,EAAE,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB;AAFR,KADM,CADU;AAOlBI,IAAAA,aAAa,EAAE;AACbC,MAAAA,WAAW,EAAE;AADA;AAPG,GADT;AAYXC,EAAAA,gBAAgB,EAAE;AAChBJ,IAAAA,MAAM,EAAE,CACN;AACEC,MAAAA,IAAI,EAAE,SADR;AAEEH,MAAAA,IAAI,EAAE,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,EAA+B,GAA/B;AAFR,KADM,CADQ;AAOhBI,IAAAA,aAAa,EAAE;AACbG,MAAAA,OAAO,EAAE;AADI;AAPC,GAZP;AAuBXC,EAAAA,cAAc,EAAE;AACdN,IAAAA,MAAM,EAAE,CACN;AACEC,MAAAA,IAAI,EAAE,OADR;AAEEH,MAAAA,IAAI,EAAE,CAAC,EAAD,EAAK,EAAL,EAAS,CAAT,EAAY,EAAZ,EAAgB,CAAhB,EAAmB,EAAnB;AAFR,KADM,CADM;AAOdI,IAAAA,aAAa,EAAE;AACbK,MAAAA,KAAK,EAAE;AADM;AAPD,GAvBL;AAkCXC,EAAAA,cAAc,EAAE;AACdR,IAAAA,MAAM,EAAE,CACN;AACEC,MAAAA,IAAI,EAAE,QADR;AAEEH,MAAAA,IAAI,EAAE,CAAC,EAAD,EAAK,EAAL,EAAS,CAAT,EAAY,EAAZ,EAAgB,CAAhB,EAAmB,EAAnB,EAAuB,CAAvB;AAFR,KADM,CADM;AAOdI,IAAAA,aAAa,EAAE;AACbO,MAAAA,MAAM,EAAE;AADK;AAPD,GAlCL;AA6CXC,EAAAA,WAAW,EAAE;AACXV,IAAAA,MAAM,EAAE,CACN;AACEC,MAAAA,IAAI,EAAE,cADR;AAEEH,MAAAA,IAAI,EAAE,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B;AAFR,KADM;AADG,GA7CF;AAqDXa,EAAAA,WAAW,EAAE;AACXX,IAAAA,MAAM,EAAE,CACN;AACEC,MAAAA,IAAI,EAAE,cADR;AAEEH,MAAAA,IAAI,EAAE,CAAC,GAAD,EAAM,IAAN,EAAY,GAAZ,EAAiB,IAAjB,EAAuB,IAAvB,EAA6B,IAA7B,EAAmC,IAAnC;AAFR,KADM;AADG,GArDF;AA6DXc,EAAAA,UAAU,EAAE;AACVZ,IAAAA,MAAM,EAAE,CACN;AACEC,MAAAA,IAAI,EAAE,YADR;AAEEH,MAAAA,IAAI,EAAE,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B;AAFR,KADM;AADE;AA7DD,CAAb;AAwEAD,IAAI,CAACgB,KAAL,CAAW,uCAAX,EAAoDC,KAApD,CAA0D,YAAM;AAC9D,SAAO,CAAC,GAAD,EAAMhB,IAAI,CAACC,kBAAX,CAAP;AACD,CAFD;AAIAF,IAAI,CAACgB,KAAL,CAAW,mCAAX,EAAgDC,KAAhD,CAAsD,YAAM;AAC1D,SAAO,CAAC,GAAD,EAAMhB,IAAI,CAACM,gBAAX,CAAP;AACD,CAFD;AAIAP,IAAI,CAACgB,KAAL,CAAW,iCAAX,EAA8CC,KAA9C,CAAoD,YAAM;AACxD,SAAO,CAAC,GAAD,EAAMhB,IAAI,CAACQ,cAAX,CAAP;AACD,CAFD;AAIAT,IAAI,CAACgB,KAAL,CAAW,kCAAX,EAA+CC,KAA/C,CAAqD,YAAM;AACzD,SAAO,CAAC,GAAD,EAAMhB,IAAI,CAACU,cAAX,CAAP;AACD,CAFD;AAIAX,IAAI,CAACgB,KAAL,CAAW,wCAAX,EAAqDC,KAArD,CAA2D,YAAM;AAC/D,SAAO,CAAC,GAAD,EAAMhB,IAAI,CAACY,WAAX,CAAP;AACD,CAFD;AAIAb,IAAI,CAACgB,KAAL,CAAW,wCAAX,EAAqDC,KAArD,CAA2D,YAAM;AAC/D,SAAO,CAAC,GAAD,EAAMhB,IAAI,CAACa,WAAX,CAAP;AACD,CAFD;AAIAd,IAAI,CAACgB,KAAL,CAAW,sCAAX,EAAmDC,KAAnD,CAAyD,YAAM;AAC7D,SAAO,CAAC,GAAD,EAAMhB,IAAI,CAACc,UAAX,CAAP;AACD,CAFD","sourcesContent":["import mock from '@/fake-db/mock.js'\n\nconst data = {\n  subscribers_gained: {\n    series: [\n      {\n        name: 'Subscribers',\n        data: [28, 40, 36, 52, 38, 60, 55]\n      }\n    ],\n    analyticsData: {\n      subscribers: 92600\n    }\n  },\n  revenueGenerated: {\n    series: [\n      {\n        name: 'Revenue',\n        data: [350, 275, 400, 300, 350, 300, 450]\n      }\n    ],\n    analyticsData: {\n      revenue: 97500\n    }\n  },\n  quarterlySales: {\n    series: [\n      {\n        name: 'Sales',\n        data: [10, 15, 7, 12, 3, 16]\n      }\n    ],\n    analyticsData: {\n      sales: '36%'\n    }\n  },\n  ordersRecevied: {\n    series: [\n      {\n        name: 'Orders',\n        data: [10, 15, 8, 15, 7, 12, 8]\n      }\n    ],\n    analyticsData: {\n      orders: 97500\n    }\n  },\n  siteTraffic: {\n    series: [\n      {\n        name: 'Traffic Rate',\n        data: [150, 200, 125, 225, 200, 250]\n      }\n    ]\n  },\n  activeUsers: {\n    series: [\n      {\n        name: 'Active Users',\n        data: [750, 1000, 900, 1250, 1000, 1200, 1100]\n      }\n    ]\n  },\n  newsletter: {\n    series: [\n      {\n        name: 'Newsletter',\n        data: [365, 390, 365, 400, 375, 400]\n      }\n    ]\n  }\n}\n\n\nmock.onGet('/api/card/card-statistics/subscribers').reply(() => {\n  return [200, data.subscribers_gained]\n})\n\nmock.onGet('/api/card/card-statistics/revenue').reply(() => {\n  return [200, data.revenueGenerated]\n})\n\nmock.onGet('/api/card/card-statistics/sales').reply(() => {\n  return [200, data.quarterlySales]\n})\n\nmock.onGet('/api/card/card-statistics/orders').reply(() => {\n  return [200, data.ordersRecevied]\n})\n\nmock.onGet('/api/card/card-statistics/site-traffic').reply(() => {\n  return [200, data.siteTraffic]\n})\n\nmock.onGet('/api/card/card-statistics/active-users').reply(() => {\n  return [200, data.activeUsers]\n})\n\nmock.onGet('/api/card/card-statistics/newsletter').reply(() => {\n  return [200, data.newsletter]\n})\n"]}]}