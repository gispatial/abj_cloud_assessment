{"remainingRequest":"/Users/crocslut/Documents/Git/abj_cloud_assessment/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/crocslut/Documents/Git/abj_cloud_assessment/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/crocslut/Documents/Git/abj_cloud_assessment/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/crocslut/Documents/Git/abj_cloud_assessment/src/views/components/vuesax/sidebar/SidebarStatic.vue?vue&type=template&id=202e28db&","dependencies":[{"path":"/Users/crocslut/Documents/Git/abj_cloud_assessment/src/views/components/vuesax/sidebar/SidebarStatic.vue","mtime":1634376356522},{"path":"/Users/crocslut/Documents/Git/abj_cloud_assessment/node_modules/cache-loader/dist/cjs.js","mtime":1634370900025},{"path":"/Users/crocslut/Documents/Git/abj_cloud_assessment/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1634373319752},{"path":"/Users/crocslut/Documents/Git/abj_cloud_assessment/node_modules/cache-loader/dist/cjs.js","mtime":1634370900025},{"path":"/Users/crocslut/Documents/Git/abj_cloud_assessment/node_modules/vue-loader/lib/index.js","mtime":1634373319752}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}