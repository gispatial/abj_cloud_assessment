{"remainingRequest":"/Users/crocslut/Desktop/abj_cloud_assessment/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/crocslut/Desktop/abj_cloud_assessment/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/crocslut/Desktop/abj_cloud_assessment/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/crocslut/Desktop/abj_cloud_assessment/src/views/components/vuesax/sidebar/SidebarReduceExpand.vue?vue&type=template&id=6ba3d94d&","dependencies":[{"path":"/Users/crocslut/Desktop/abj_cloud_assessment/src/views/components/vuesax/sidebar/SidebarReduceExpand.vue","mtime":1634797132170},{"path":"/Users/crocslut/Desktop/abj_cloud_assessment/node_modules/cache-loader/dist/cjs.js","mtime":1634797146168},{"path":"/Users/crocslut/Desktop/abj_cloud_assessment/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1634797150551},{"path":"/Users/crocslut/Desktop/abj_cloud_assessment/node_modules/cache-loader/dist/cjs.js","mtime":1634797146168},{"path":"/Users/crocslut/Desktop/abj_cloud_assessment/node_modules/vue-loader/lib/index.js","mtime":1634797150551}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}