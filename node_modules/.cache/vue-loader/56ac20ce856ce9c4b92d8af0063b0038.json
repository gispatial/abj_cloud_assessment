{"remainingRequest":"/Users/crocslut/Desktop/abj_cloud_assessment/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/crocslut/Desktop/abj_cloud_assessment/src/views/charts-and-maps/charts/chartjs/ChartjsDoughnutChart.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/crocslut/Desktop/abj_cloud_assessment/src/views/charts-and-maps/charts/chartjs/ChartjsDoughnutChart.vue","mtime":1634797132114},{"path":"/Users/crocslut/Desktop/abj_cloud_assessment/node_modules/cache-loader/dist/cjs.js","mtime":1634797146168},{"path":"/Users/crocslut/Desktop/abj_cloud_assessment/node_modules/babel-loader/lib/index.js","mtime":1634797145766},{"path":"/Users/crocslut/Desktop/abj_cloud_assessment/node_modules/cache-loader/dist/cjs.js","mtime":1634797146168},{"path":"/Users/crocslut/Desktop/abj_cloud_assessment/node_modules/vue-loader/lib/index.js","mtime":1634797150551}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBDaGFydGpzQ29tcG9uZW50RG91Z2hudXRDaGFydCBmcm9tICIuL2NoYXJ0cy1jb21wb25lbnRzL0NoYXJ0anNDb21wb25lbnREb3VnaG51dENoYXJ0LnZ1ZSIKZXhwb3J0IGRlZmF1bHQgewogICAgZGF0YSgpIHsKICAgICAgICByZXR1cm4gewogICAgICAgICAgICBkYXRhOiB7CiAgICAgICAgICAgICAgICBsYWJlbHM6IFsiQWZyaWNhIiwgIkFzaWEiLCAiRXVyb3BlIiwgIkxhdGluIEFtZXJpY2EiLCAiTm9ydGggQW1lcmljYSJdLAogICAgICAgICAgICAgICAgZGF0YXNldHM6IFt7CiAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICJQb3B1bGF0aW9uIChtaWxsaW9ucykiLAogICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogWyIjNzM2N0YwIiwgIiMyOEM3NkYiLCAiI0VBNTQ1NSIsICIjRkY5RjQzIiwgIiMxRTFFMUUiXSwKICAgICAgICAgICAgICAgICAgICBkYXRhOiBbMjQ3OCwgNTI2NywgNzM0LCA3ODQsIDQzM10KICAgICAgICAgICAgICAgIH1dCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIG9wdGlvbnM6IHsKICAgICAgICAgICAgICAgIHRpdGxlOiB7CiAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogdHJ1ZSwKICAgICAgICAgICAgICAgICAgICB0ZXh0OiAnUHJlZGljdGVkIHdvcmxkIHBvcHVsYXRpb24gKG1pbGxpb25zKSBpbiAyMDUwJwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfSwKICAgIGNvbXBvbmVudHM6IHsKICAgICAgICBDaGFydGpzQ29tcG9uZW50RG91Z2hudXRDaGFydAogICAgfQp9Cg=="},{"version":3,"sources":["ChartjsDoughnutChart.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ChartjsDoughnutChart.vue","sourceRoot":"src/views/charts-and-maps/charts/chartjs","sourcesContent":["<!-- =========================================================================================\n    File Name: ChartDoughnutChart.vue\n    Description: Create Doughnut chart\n    ----------------------------------------------------------------------------------------\n    Item Name: abjcloudsolutions.com dashboard management portal\n      Author: Justed@Aidy\n    Staging URL: http://tripcarte.gispatial.tech/api\n========================================================================================== -->\n\n\n<template>\n    <vx-card title=\"Doughnut Chart\" class=\"mb-base\" code-toggler>\n\n        <div class=\"mt-5\">\n            <chartjs-component-doughnut-chart :height=250 :data=\"data\" :options=\"options\"></chartjs-component-doughnut-chart>\n        </div>\n\n        <template slot=\"codeContainer\">\n&lt;script&gt;\nimport { Doughnut } from 'vue-chartjs'\n\nexport default {\n  extends: Line,\n  data() {\n    return {\n      data: {\n        labels: [&quot;Africa&quot;, &quot;Asia&quot;, &quot;Europe&quot;, &quot;Latin America&quot;, &quot;North America&quot;],\n        datasets: [{\n          label: &quot;Population (millions)&quot;,\n          backgroundColor: [&quot;#3e95cd&quot;, &quot;#8e5ea2&quot;, &quot;#3cba9f&quot;, &quot;#e8c3b9&quot;, &quot;#c45850&quot;],\n          data: [2478, 5267, 734, 784, 433]\n        }]\n      },\n      options: {\n        title: {\n          display: true,\n          text: 'Predicted world population (millions) in 2050'\n        }\n      }\n    }\n  }\n  mounted () {\n    this.renderChart(this.data, this.options)\n  }\n}\n&lt;/script&gt;\n        </template>\n    </vx-card>\n</template>\n\n<script>\nimport ChartjsComponentDoughnutChart from \"./charts-components/ChartjsComponentDoughnutChart.vue\"\nexport default {\n    data() {\n        return {\n            data: {\n                labels: [\"Africa\", \"Asia\", \"Europe\", \"Latin America\", \"North America\"],\n                datasets: [{\n                    label: \"Population (millions)\",\n                    backgroundColor: [\"#7367F0\", \"#28C76F\", \"#EA5455\", \"#FF9F43\", \"#1E1E1E\"],\n                    data: [2478, 5267, 734, 784, 433]\n                }]\n            },\n            options: {\n                title: {\n                    display: true,\n                    text: 'Predicted world population (millions) in 2050'\n                }\n            }\n        }\n    },\n    components: {\n        ChartjsComponentDoughnutChart\n    }\n}\n</script>\n"]}]}