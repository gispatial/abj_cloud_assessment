{"remainingRequest":"/Users/crocslut/Desktop/abj_cloud_assessment/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/crocslut/Desktop/abj_cloud_assessment/src/views/components/extra-components/tree/TreeSearchTree.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/crocslut/Desktop/abj_cloud_assessment/src/views/components/extra-components/tree/TreeSearchTree.vue","mtime":1634372945961},{"path":"/Users/crocslut/Desktop/abj_cloud_assessment/node_modules/cache-loader/dist/cjs.js","mtime":1634370900025},{"path":"/Users/crocslut/Desktop/abj_cloud_assessment/node_modules/babel-loader/lib/index.js","mtime":1634273594024},{"path":"/Users/crocslut/Desktop/abj_cloud_assessment/node_modules/cache-loader/dist/cjs.js","mtime":1634370900025},{"path":"/Users/crocslut/Desktop/abj_cloud_assessment/node_modules/vue-loader/lib/index.js","mtime":1634373319752}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCB7IFZUcmVlLCBWU2VsZWN0VHJlZX0gIGZyb20gJ3Z1ZS10cmVlLWhhbG93ZXInCgpleHBvcnQgZGVmYXVsdCB7CiAgZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIHNlYXJjaHdvcmQ6ICcnLAogICAgICB0cmVlRGF0YTogW3sKICAgICAgICB0aXRsZTogJ25vZGUxJywKICAgICAgICBleHBhbmRlZDogdHJ1ZSwKICAgICAgICBjaGlsZHJlbjogW3sKICAgICAgICAgIHRpdGxlOiAnbm9kZSAxLTEnLAogICAgICAgICAgZXhwYW5kZWQ6IHRydWUsCiAgICAgICAgICBjaGlsZHJlbjogW3sKICAgICAgICAgICAgdGl0bGU6ICdub2RlIDEtMS0xJwogICAgICAgICAgfSwgewogICAgICAgICAgICB0aXRsZTogJ25vZGUgMS0xLTInCiAgICAgICAgICB9LCB7CiAgICAgICAgICAgIHRpdGxlOiAnbm9kZSAxLTEtMycKICAgICAgICAgIH1dCiAgICAgICAgfSwgewogICAgICAgICAgdGl0bGU6ICdub2RlIDEtMicsCiAgICAgICAgICBjaGlsZHJlbjogW3sKICAgICAgICAgICAgdGl0bGU6ICI8c3BhbiBzdHlsZT0nY29sb3I6IHJlZCc+bm9kZSAxLTItMTwvc3Bhbj4iCiAgICAgICAgICB9LCB7CiAgICAgICAgICAgIHRpdGxlOiAiPHNwYW4gc3R5bGU9J2NvbG9yOiByZWQnPm5vZGUgMS0yLTI8L3NwYW4+IgogICAgICAgICAgfV0KICAgICAgICB9XQogICAgICB9XQogICAgfQogIH0sCiAgbWV0aG9kczogewogICAgc2VhcmNoICgpIHsKICAgICAgdGhpcy4kcmVmcy50cmVlLnNlYXJjaE5vZGVzKHRoaXMuc2VhcmNod29yZCkKICAgIH0sCiAgICB0cGwgKC4uLmFyZ3MpIHsKICAgICAgbGV0IHswOiBub2RlLCAyOiBwYXJlbnQsIDM6IGluZGV4fSA9IGFyZ3MKICAgICAgbGV0IHRpdGxlQ2xhc3MgPSBub2RlLnNlbGVjdGVkID8gJ25vZGUtdGl0bGUgbm9kZS1zZWxlY3RlZCcgOiAnbm9kZS10aXRsZScKICAgICAgaWYgKG5vZGUuc2VhcmNoZWQpIHRpdGxlQ2xhc3MgKz0gJyBub2RlLXNlYXJjaGVkJwogICAgICByZXR1cm4gPHNwYW4+CiAgICAgICAgPHNwYW4gY2xhc3M9InRyZWUtZXhwYW5kIiBvbkNsaWNrPXsoKSA9PiB0aGlzLiRyZWZzLnRyZWUuYWRkTm9kZShub2RlLCB7dGl0bGU6ICdzeW5jIG5vZGUnfSl9Pis8L3NwYW4+CiAgICAgICAgIDxzcGFuIGNsYXNzPXt0aXRsZUNsYXNzfSBkb21Qcm9wc0lubmVySFRNTD17bm9kZS50aXRsZX0gb25DbGljaz17KCkgPT4gewogICAgICAgICAgIHRoaXMuJHJlZnMudHJlZS5ub2RlU2VsZWN0ZWQobm9kZSkKICAgICAgICAgfX0+PC9zcGFuPgogICAgICA8YnV0dG9uIGNsYXNzPSJidG4tYXN5bmMgdGV4dC13YXJuaW5nIGJvcmRlci1ub25lIGN1cnNvci1wb2ludGVyIHB4LTIgcHktMSBtci0yIHJvdW5kZWQiIG9uQ2xpY2s9eygpID0+IHRoaXMuYXN5bmNMb2FkKG5vZGUpfT5hc3luYzwvYnV0dG9uPgogICAgICA8YnV0dG9uIGNsYXNzPSJidG4tZGVsZXRlIHRleHQtZGFuZ2VyIGJvcmRlci1ub25lIGN1cnNvci1wb2ludGVyIHB4LTIgcHktMSByb3VuZGVkIiBvbkNsaWNrPXsoKSA9PiB0aGlzLiRyZWZzLnRyZWUuZGVsTm9kZShub2RlLCBwYXJlbnQsIGluZGV4KX0+ZGVsZXRlPC9idXR0b24+CiAgICAgIDwvc3Bhbj4KICAgIH0sCiAgICBhc3luYyBhc3luY0xvYWQgKG5vZGUpIHsKICAgICAgY29uc3Qge2NoZWNrZWQgPSBmYWxzZX0gPSBub2RlCiAgICAgIHRoaXMuJHNldChub2RlLCAnbG9hZGluZycsIHRydWUpCiAgICAgIGxldCBwcm8gPSBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHsKICAgICAgICBzZXRUaW1lb3V0KHJlc29sdmUsIDIwMDAsIFsnYXN5bmMgbm9kZTEnLCAnYXN5bmMgbm9kZTInXSkKICAgICAgfSkKICAgICAgdGhpcy4kcmVmcy50cmVlLmFkZE5vZGVzKG5vZGUsIGF3YWl0IHBybykKICAgICAgdGhpcy4kc2V0KG5vZGUsICdsb2FkaW5nJywgZmFsc2UpCiAgICAgIGlmIChjaGVja2VkKSB7CiAgICAgICAgdGhpcy4kcmVmcy50cmVlLmNoaWxkQ2hlY2tlZEhhbmRsZShub2RlLCBjaGVja2VkKQogICAgICB9CiAgICB9LAogIH0sCiAgY29tcG9uZW50czogewogICAgVlRyZWUsCiAgICBWU2VsZWN0VHJlZQogIH0KfQo="},{"version":3,"sources":["TreeSearchTree.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"TreeSearchTree.vue","sourceRoot":"src/views/components/extra-components/tree","sourcesContent":["<template>\n  <vx-card title=\"Search Tree\" code-toggler>\n    <vs-input class=\"inputx tree-search-input float-left mr-2\" placeholder=\"Search...\" v-model.lazy=\"searchword\" />\n    <vs-button color=\"primary\" type=\"filled\" @click=\"search\" class=\"mb-3\">Search</vs-button>\n    <v-tree ref='tree' :canDeleteRoot=\"true\" :data='treeData' :draggable='true' :tpl='tpl' :halfcheck='true' :multiple=\"true\"/>\n\n    <template slot=\"codeContainer\">\n&lt;template&gt;\n  &lt;vs-input class=&quot;inputx tree-search-input float-left mr-2&quot; placeholder=&quot;Search...&quot; v-model.lazy=&quot;searchword&quot; /&gt;\n  &lt;vs-button color=&quot;primary&quot; type=&quot;filled&quot; @click=&quot;search&quot; class=&quot;mb-3&quot;&gt;Search&lt;/vs-button&gt;\n  &lt;v-tree ref=&apos;tree&apos; :canDeleteRoot=&quot;true&quot; :data=&apos;treeData&apos; :draggable=&apos;true&apos; :tpl=&apos;tpl&apos; :halfcheck=&apos;true&apos; :multiple=&quot;true&quot;/&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport { VTree, VSelectTree}  from &apos;vue-tree-halower&apos;\n\nexport default {\n  data() {\n    return {\n      searchword: &apos;&apos;,\n      treeData: [{\n        title: &apos;node1&apos;,\n        expanded: true,\n        children: [{\n          title: &apos;node 1-1&apos;,\n          expanded: true,\n          children: [{\n            title: &apos;node 1-1-1&apos;\n          }, {\n            title: &apos;node 1-1-2&apos;\n          }, {\n            title: &apos;node 1-1-3&apos;\n          }]\n        }, {\n          title: &apos;node 1-2&apos;,\n          children: [{\n            title: &quot;&lt;span style=&apos;color: red&apos;&gt;node 1-2-1&lt;/span&gt;&quot;\n          }, {\n            title: &quot;&lt;span style=&apos;color: red&apos;&gt;node 1-2-2&lt;/span&gt;&quot;\n          }]\n        }]\n      }]\n    }\n  },\n  methods: {\n    search () {\n      this.$refs.tree.searchNodes(this.searchword)\n    },\n    tpl (...args) {\n      let {0: node, 2: parent, 3: index} = args\n      let titleClass = node.selected ? &apos;node-title node-selected&apos; : &apos;node-title&apos;\n      if (node.searched) titleClass += &apos; node-searched&apos;\n      return &lt;span&gt;\n        &lt;span class=&quot;tree-expand&quot; onClick={() =&gt; this.$refs.tree.addNode(node, {title: &apos;sync node&apos;})}&gt;+&lt;/span&gt;\n         &lt;span class={titleClass} domPropsInnerHTML={node.title} onClick={() =&gt; {\n           this.$refs.tree.nodeSelected(node)\n         }}&gt;&lt;/span&gt;\n      &lt;button class=&quot;btn-async text-warning border-none cursor-pointer px-2 py-1 mr-2 rounded&quot; onClick={() =&gt; this.asyncLoad(node)}&gt;async&lt;/button&gt;\n      &lt;button class=&quot;btn-delete text-danger border-none cursor-pointer px-2 py-1 rounded&quot; onClick={() =&gt; this.$refs.tree.delNode(node, parent, index)}&gt;delete&lt;/button&gt;\n      &lt;/span&gt;\n    },\n    async asyncLoad (node) {\n      const {checked = false} = node\n      this.$set(node, &apos;loading&apos;, true)\n      let pro = new Promise(resolve =&gt; {\n        setTimeout(resolve, 2000, [&apos;async node1&apos;, &apos;async node2&apos;])\n      })\n      this.$refs.tree.addNodes(node, await pro)\n      this.$set(node, &apos;loading&apos;, false)\n      if (checked) {\n        this.$refs.tree.childCheckedHandle(node, checked)\n      }\n    },\n  },\n  components: {\n    VTree,\n    VSelectTree\n  }\n}\n&lt;/script&gt;\n\n&lt;style lang=&quot;scss&quot;&gt;\n@import &quot;@/assets/scss/vuexy/extraComponents/tree.scss&quot;;\n\nbutton.btn-async{\n  background: rgba(var(--vs-warning),0.15);\n}\n\nbutton.btn-delete{\n  background: rgba(var(--vs-danger),0.15);\n}\n&lt;/style&gt;\n    </template>\n  </vx-card>\n</template>\n\n<script>\nimport { VTree, VSelectTree}  from 'vue-tree-halower'\n\nexport default {\n  data() {\n    return {\n      searchword: '',\n      treeData: [{\n        title: 'node1',\n        expanded: true,\n        children: [{\n          title: 'node 1-1',\n          expanded: true,\n          children: [{\n            title: 'node 1-1-1'\n          }, {\n            title: 'node 1-1-2'\n          }, {\n            title: 'node 1-1-3'\n          }]\n        }, {\n          title: 'node 1-2',\n          children: [{\n            title: \"<span style='color: red'>node 1-2-1</span>\"\n          }, {\n            title: \"<span style='color: red'>node 1-2-2</span>\"\n          }]\n        }]\n      }]\n    }\n  },\n  methods: {\n    search () {\n      this.$refs.tree.searchNodes(this.searchword)\n    },\n    tpl (...args) {\n      let {0: node, 2: parent, 3: index} = args\n      let titleClass = node.selected ? 'node-title node-selected' : 'node-title'\n      if (node.searched) titleClass += ' node-searched'\n      return <span>\n        <span class=\"tree-expand\" onClick={() => this.$refs.tree.addNode(node, {title: 'sync node'})}>+</span>\n         <span class={titleClass} domPropsInnerHTML={node.title} onClick={() => {\n           this.$refs.tree.nodeSelected(node)\n         }}></span>\n      <button class=\"btn-async text-warning border-none cursor-pointer px-2 py-1 mr-2 rounded\" onClick={() => this.asyncLoad(node)}>async</button>\n      <button class=\"btn-delete text-danger border-none cursor-pointer px-2 py-1 rounded\" onClick={() => this.$refs.tree.delNode(node, parent, index)}>delete</button>\n      </span>\n    },\n    async asyncLoad (node) {\n      const {checked = false} = node\n      this.$set(node, 'loading', true)\n      let pro = new Promise(resolve => {\n        setTimeout(resolve, 2000, ['async node1', 'async node2'])\n      })\n      this.$refs.tree.addNodes(node, await pro)\n      this.$set(node, 'loading', false)\n      if (checked) {\n        this.$refs.tree.childCheckedHandle(node, checked)\n      }\n    },\n  },\n  components: {\n    VTree,\n    VSelectTree\n  }\n}\n</script>\n\n<style lang=\"scss\">\n@import \"@/assets/scss/vuexy/extraComponents/tree.scss\";\n\nbutton.btn-async{\n  background: rgba(var(--vs-warning),0.15);\n}\n\nbutton.btn-delete{\n  background: rgba(var(--vs-danger),0.15);\n}\n</style>\n"]}]}