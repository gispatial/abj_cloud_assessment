{"remainingRequest":"/Users/crocslut/Desktop/abj_cloud_assessment/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/crocslut/Desktop/abj_cloud_assessment/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/crocslut/Desktop/abj_cloud_assessment/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/crocslut/Desktop/abj_cloud_assessment/src/views/pages/Invoice.vue?vue&type=template&id=4d0b5b18&","dependencies":[{"path":"/Users/crocslut/Desktop/abj_cloud_assessment/src/views/pages/Invoice.vue","mtime":1634376355979},{"path":"/Users/crocslut/Desktop/abj_cloud_assessment/node_modules/cache-loader/dist/cjs.js","mtime":1634370900025},{"path":"/Users/crocslut/Desktop/abj_cloud_assessment/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1634373319752},{"path":"/Users/crocslut/Desktop/abj_cloud_assessment/node_modules/cache-loader/dist/cjs.js","mtime":1634370900025},{"path":"/Users/crocslut/Desktop/abj_cloud_assessment/node_modules/vue-loader/lib/index.js","mtime":1634373319752}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}