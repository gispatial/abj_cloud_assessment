{"remainingRequest":"/Users/crocslut/Documents/Git/abj_cloud_assessment/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/crocslut/Documents/Git/abj_cloud_assessment/src/views/components/extra-components/tree/TreeAsyncTree.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/crocslut/Documents/Git/abj_cloud_assessment/src/views/components/extra-components/tree/TreeAsyncTree.vue","mtime":1634372945961},{"path":"/Users/crocslut/Documents/Git/abj_cloud_assessment/node_modules/cache-loader/dist/cjs.js","mtime":1634370900025},{"path":"/Users/crocslut/Documents/Git/abj_cloud_assessment/node_modules/babel-loader/lib/index.js","mtime":1634273594024},{"path":"/Users/crocslut/Documents/Git/abj_cloud_assessment/node_modules/cache-loader/dist/cjs.js","mtime":1634370900025},{"path":"/Users/crocslut/Documents/Git/abj_cloud_assessment/node_modules/vue-loader/lib/index.js","mtime":1634373319752}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCB7IFZUcmVlLCBWU2VsZWN0VHJlZX0gIGZyb20gJ3Z1ZS10cmVlLWhhbG93ZXInCgpleHBvcnQgZGVmYXVsdCB7CiAgZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIGluaXRTZWxlY3RlZDogWydub2RlLTEnXSwKICAgICAgdHJlZURhdGE6IFt7CiAgICAgICAgdGl0bGU6ICdub2RlMScsCiAgICAgICAgZXhwYW5kZWQ6IGZhbHNlLAogICAgICAgIGFzeW5jOiB0cnVlCiAgICAgIH1dCiAgICB9CiAgfSwKICBtZXRob2RzOiB7CiAgICBub2RlY2hlY2tlZCAobm9kZSwgdikgewogICAgICBhbGVydCgndGhhdCBhIG5vZGUtY2hlY2sgZW52ZW50IC4uLicgKyBub2RlLnRpdGxlICsgdikKICAgIH0sCiAgICBhc3luYyBhc3luY0xvYWQgKG5vZGUpIHsKICAgICAgY29uc3Qge2NoZWNrZWQgPSBmYWxzZX0gPSBub2RlCiAgICAgIHRoaXMuJHNldChub2RlLCAnbG9hZGluZycsIHRydWUpCiAgICAgIGxldCBwcm8gPSBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHsKICAgICAgICBzZXRUaW1lb3V0KHJlc29sdmUsIDIwMDAsIFt7dGl0bGU6ICd0ZXN0MScsIGFzeW5jOiB0cnVlfSwge3RpdGxlOiAndGVzdDInLCBhc3luYzogdHJ1ZX0sIHt0aXRsZTogJ3Rlc3QzJ31dKQogICAgICB9KQogICAgICBpZiAoIW5vZGUuaGFzT3duUHJvcGVydHkoJ2NoaWxkcmVuJykpIHsKICAgICAgICB0aGlzLiRzZXQobm9kZSwgJ2NoaWxkcmVuJywgW10pCiAgICAgIH0KICAgICAgbm9kZS5jaGlsZHJlbi5wdXNoKC4uLnBybykKICAgICAgdGhpcy4kc2V0KG5vZGUsICdsb2FkaW5nJywgZmFsc2UpCiAgICAgIGlmIChjaGVja2VkKSB7CiAgICAgICAgdGhpcy4kcmVmcy50cmVlLmNoaWxkQ2hlY2tlZEhhbmRsZShub2RlLCBjaGVja2VkKQogICAgICB9CiAgICB9LAogIH0sCiAgY29tcG9uZW50czogewogICAgVlRyZWUsCiAgICBWU2VsZWN0VHJlZQogIH0KfQo="},{"version":3,"sources":["TreeAsyncTree.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsDA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"TreeAsyncTree.vue","sourceRoot":"src/views/components/extra-components/tree","sourcesContent":["<template>\n  <vx-card title=\"Async Tree\" code-toggler>\n    <v-tree ref=\"tree\" :data='treeData' :multiple='false' @node-check='nodechecked' @async-load-nodes='asyncLoad'/>\n\n    <template slot=\"codeContainer\">\n&lt;tempalte&gt;\n  &lt;v-tree ref=&quot;tree&quot; :data=&apos;treeData&apos; :multiple=&apos;false&apos; @node-check=&apos;nodechecked&apos; @async-load-nodes=&apos;asyncLoad&apos;/&gt;\n&lt;/tempalte&gt;\n\n&lt;script&gt;\nimport { VTree, VSelectTree}  from &apos;vue-tree-halower&apos;\n\nexport default {\n  data() {\n    return {\n      initSelected: [&apos;node-1&apos;],\n      treeData: [{\n        title: &apos;node1&apos;,\n        expanded: false,\n        async: true\n      }]\n    }\n  },\n  methods: {\n    nodechecked (node, v) {\n      alert(&apos;that a node-check envent ...&apos; + node.title + v)\n    },\n    async asyncLoad (node) {\n      const {checked = false} = node\n      this.$set(node, &apos;loading&apos;, true)\n      let pro = await new Promise(resolve =&gt; {\n        setTimeout(resolve, 2000, [{title: &apos;test1&apos;, async: true}, {title: &apos;test2&apos;, async: true}, {title: &apos;test3&apos;}])\n      })\n      if (!node.hasOwnProperty(&apos;children&apos;)) {\n        this.$set(node, &apos;children&apos;, [])\n      }\n      node.children.push(...pro)\n      this.$set(node, &apos;loading&apos;, false)\n      if (checked) {\n        this.$refs.tree.childCheckedHandle(node, checked)\n      }\n    },\n  },\n  components: {\n    VTree,\n    VSelectTree\n  }\n}\n&lt;/script&gt;\n    </template>\n  </vx-card>\n</template>\n\n<script>\nimport { VTree, VSelectTree}  from 'vue-tree-halower'\n\nexport default {\n  data() {\n    return {\n      initSelected: ['node-1'],\n      treeData: [{\n        title: 'node1',\n        expanded: false,\n        async: true\n      }]\n    }\n  },\n  methods: {\n    nodechecked (node, v) {\n      alert('that a node-check envent ...' + node.title + v)\n    },\n    async asyncLoad (node) {\n      const {checked = false} = node\n      this.$set(node, 'loading', true)\n      let pro = await new Promise(resolve => {\n        setTimeout(resolve, 2000, [{title: 'test1', async: true}, {title: 'test2', async: true}, {title: 'test3'}])\n      })\n      if (!node.hasOwnProperty('children')) {\n        this.$set(node, 'children', [])\n      }\n      node.children.push(...pro)\n      this.$set(node, 'loading', false)\n      if (checked) {\n        this.$refs.tree.childCheckedHandle(node, checked)\n      }\n    },\n  },\n  components: {\n    VTree,\n    VSelectTree\n  }\n}\n</script>\n"]}]}