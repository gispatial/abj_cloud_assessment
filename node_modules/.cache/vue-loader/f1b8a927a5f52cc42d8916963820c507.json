{"remainingRequest":"/Users/crocslut/Desktop/abj_cloud_assessment/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/crocslut/Desktop/abj_cloud_assessment/src/components/excel/ImportExcel.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/crocslut/Desktop/abj_cloud_assessment/src/components/excel/ImportExcel.vue","mtime":1634372945925},{"path":"/Users/crocslut/Desktop/abj_cloud_assessment/node_modules/cache-loader/dist/cjs.js","mtime":1634370900025},{"path":"/Users/crocslut/Desktop/abj_cloud_assessment/node_modules/babel-loader/lib/index.js","mtime":1634273594024},{"path":"/Users/crocslut/Desktop/abj_cloud_assessment/node_modules/cache-loader/dist/cjs.js","mtime":1634370900025},{"path":"/Users/crocslut/Desktop/abj_cloud_assessment/node_modules/vue-loader/lib/index.js","mtime":1634373319752}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBYTFNYIGZyb20gJ3hsc3gnCgpleHBvcnQgZGVmYXVsdCB7CiAgcHJvcHM6IHsKICAgIG9uU3VjY2VzczogewogICAgICB0eXBlOiBGdW5jdGlvbiwKICAgICAgcmVxdWlyZWQ6IHRydWUKICAgIH0KICB9LAogIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBleGNlbERhdGE6IHsKICAgICAgICBoZWFkZXI6IG51bGwsCiAgICAgICAgcmVzdWx0czogbnVsbCwKICAgICAgICBtZXRhOiBudWxsLAogICAgICB9CiAgICB9CiAgfSwKICBtZXRob2RzOiB7CiAgICBnZW5lcmF0ZURhdGEoeyBoZWFkZXIsIHJlc3VsdHMsIG1ldGEgfSkgewogICAgICB0aGlzLmV4Y2VsRGF0YS5oZWFkZXIgPSBoZWFkZXIKICAgICAgdGhpcy5leGNlbERhdGEucmVzdWx0cyA9IHJlc3VsdHMKICAgICAgdGhpcy5leGNlbERhdGEubWV0YSA9IG1ldGEKICAgICAgdGhpcy5vblN1Y2Nlc3MgJiYgdGhpcy5vblN1Y2Nlc3ModGhpcy5leGNlbERhdGEpCiAgICB9LAogICAgZ2V0SGVhZGVyUm93KHNoZWV0KSB7CiAgICAgIGNvbnN0IGhlYWRlcnMgPSBbXQogICAgICBjb25zdCByYW5nZSA9IFhMU1gudXRpbHMuZGVjb2RlX3JhbmdlKHNoZWV0WychcmVmJ10pCiAgICAgIGxldCBDCiAgICAgIGNvbnN0IFIgPSByYW5nZS5zLnIKICAgICAgLyogc3RhcnQgaW4gdGhlIGZpcnN0IHJvdyAqLwogICAgICBmb3IgKEMgPSByYW5nZS5zLmM7IEMgPD0gcmFuZ2UuZS5jOyArK0MpIHsgLyogd2FsayBldmVyeSBjb2x1bW4gaW4gdGhlIHJhbmdlICovCiAgICAgICAgY29uc3QgY2VsbCA9IHNoZWV0W1hMU1gudXRpbHMuZW5jb2RlX2NlbGwoeyBjOiBDLCByOiBSIH0pXQogICAgICAgIC8qIGZpbmQgdGhlIGNlbGwgaW4gdGhlIGZpcnN0IHJvdyAqLwogICAgICAgIGxldCBoZHIgPSAnVU5LTk9XTiAnICsgQyAvLyA8LS0gcmVwbGFjZSB3aXRoIHlvdXIgZGVzaXJlZCBkZWZhdWx0CiAgICAgICAgaWYgKGNlbGwgJiYgY2VsbC50KSBoZHIgPSBYTFNYLnV0aWxzLmZvcm1hdF9jZWxsKGNlbGwpCiAgICAgICAgaGVhZGVycy5wdXNoKGhkcikKICAgICAgfQogICAgICByZXR1cm4gaGVhZGVycwogICAgfSwKICAgIGhhbmRsZURyYWdvdmVyKGUpIHsKICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKQogICAgICBlLnByZXZlbnREZWZhdWx0KCkKICAgICAgZS5kYXRhVHJhbnNmZXIuZHJvcEVmZmVjdCA9ICdjb3B5JwogICAgfSwKICAgIGhhbmRsZURyb3AoZSkgewogICAgICBlLnN0b3BQcm9wYWdhdGlvbigpCiAgICAgIGUucHJldmVudERlZmF1bHQoKQogICAgICBjb25zdCBmaWxlcyA9IGUuZGF0YVRyYW5zZmVyLmZpbGVzCiAgICAgIGlmIChmaWxlcy5sZW5ndGggIT09IDEpIHsKICAgICAgICB0aGlzLiR2cy5ub3RpZnkoewogICAgICAgICAgICB0aXRsZTogJ0xvZ2luIEF0dGVtcHQnLAogICAgICAgICAgICB0ZXh0OiAnT25seSBzdXBwb3J0IHVwbG9hZGluZyBvbmUgZmlsZSEnLAogICAgICAgICAgICBpY29uUGFjazogJ2ZlYXRoZXInLAogICAgICAgICAgICBpY29uOiAnaWNvbi1hbGVydC1jaXJjbGUnLAogICAgICAgICAgICBjb2xvcjogJ3dhcm5pbmcnCiAgICAgICAgfSkKICAgICAgICByZXR1cm4KICAgICAgfQogICAgICBjb25zdCByYXdGaWxlID0gZmlsZXNbMF0gLy8gb25seSB1c2UgZmlsZXNbMF0KICAgICAgaWYgKCF0aGlzLmlzRXhjZWwocmF3RmlsZSkpIHsKICAgICAgICB0aGlzLiR2cy5ub3RpZnkoewogICAgICAgICAgICB0aXRsZTogJ0xvZ2luIEF0dGVtcHQnLAogICAgICAgICAgICB0ZXh0OiAnT25seSBzdXBwb3J0cyB1cGxvYWQgLnhsc3gsIC54bHMsIC5jc3Ygc3VmZml4IGZpbGVzJywKICAgICAgICAgICAgaWNvblBhY2s6ICdmZWF0aGVyJywKICAgICAgICAgICAgaWNvbjogJ2ljb24tYWxlcnQtY2lyY2xlJywKICAgICAgICAgICAgY29sb3I6ICd3YXJuaW5nJwogICAgICAgIH0pCiAgICAgICAgcmV0dXJuIGZhbHNlCiAgICAgIH0KICAgICAgdGhpcy51cGxvYWRGaWxlKHJhd0ZpbGUpCiAgICB9LAogICAgcmVhZGVyRGF0YShyYXdGaWxlKSB7CiAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCkKICAgICAgICByZWFkZXIub25sb2FkID0gZSA9PiB7CiAgICAgICAgICBjb25zdCBkYXRhID0gZS50YXJnZXQucmVzdWx0CiAgICAgICAgICBjb25zdCB3b3JrYm9vayA9IFhMU1gucmVhZChkYXRhLCB7IHR5cGU6ICdhcnJheScgfSkKICAgICAgICAgIGNvbnN0IGZpcnN0U2hlZXROYW1lID0gd29ya2Jvb2suU2hlZXROYW1lc1swXQogICAgICAgICAgY29uc3Qgd29ya3NoZWV0ID0gd29ya2Jvb2suU2hlZXRzW2ZpcnN0U2hlZXROYW1lXQogICAgICAgICAgY29uc3QgaGVhZGVyID0gdGhpcy5nZXRIZWFkZXJSb3cod29ya3NoZWV0KQogICAgICAgICAgY29uc3QgcmVzdWx0cyA9IFhMU1gudXRpbHMuc2hlZXRfdG9fanNvbih3b3Jrc2hlZXQpCiAgICAgICAgICBjb25zdCBtZXRhID0geyBzaGVldE5hbWU6IGZpcnN0U2hlZXROYW1lIH0KICAgICAgICAgIHRoaXMuZ2VuZXJhdGVEYXRhKHsgaGVhZGVyLCByZXN1bHRzLCBtZXRhIH0pCiAgICAgICAgICByZXNvbHZlKCkKICAgICAgICB9CiAgICAgICAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKHJhd0ZpbGUpCiAgICAgIH0pCiAgICB9LAogICAgaGFuZGxlQ2xpY2soZSkgewogICAgICBjb25zdCBmaWxlcyA9IGUudGFyZ2V0LmZpbGVzCiAgICAgIGNvbnN0IHJhd0ZpbGUgPSBmaWxlc1swXQogICAgICBpZiAoIXJhd0ZpbGUpIHJldHVybgogICAgICB0aGlzLnVwbG9hZEZpbGUocmF3RmlsZSkKICAgIH0sCiAgICBpc0V4Y2VsKGZpbGUpIHsKICAgICAgcmV0dXJuIC9cLih4bHN4fHhsc3xjc3YpJC8udGVzdChmaWxlLm5hbWUpCiAgICB9LAogICAgdXBsb2FkRmlsZShmaWxlKSB7CiAgICAgIHRoaXMuJHJlZnNbJ2ZpbGVJbnB1dCddLnZhbHVlID0gbnVsbCAvLyBmaXggY2FuJ3Qgc2VsZWN0IHRoZSBzYW1lIGV4Y2VsCiAgICAgIHRoaXMucmVhZGVyRGF0YShmaWxlKQogICAgfQoKICB9Cn0K"},{"version":3,"sources":["ImportExcel.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAkfile":"ImportExcel.vue","sourceRoot":"src/components/excel","sourcesContent":["<template>\n  <div class=\"excel-import\">\n    <input type=\"file\" ref=\"fileInput\" class=\"hidden\" accept=\".xlsx, .xls\" @change=\"handleClick\">\n    <div\n      @click=\"$refs.fileInput.click()\"\n      @drop=\"handleDrop\"\n      @dragover=\"handleDragover\"\n      @dragenter=\"handleDragover\"\n      class=\"px-8 py-16 cursor-pointer text-center border-2 border-dashed d-theme-border-grey-light d-theme-dark-bg text-xl\">\n      <feather-icon icon=\"UploadCloudIcon\" svgClasses=\"h-16 w-16 stroke-current text-grey\" class=\"block\" />\n      <span>Drop Excel File or </span>\n      <span class=\"font-medium text-primary\" @click.stop=\"$refs.fileInput.click()\">Browse</span>\n      <!-- <vs-button type=\"border\" @click.stop=\"$refs.fileInput.click()\">Browse</vs-button> -->\n    </div>\n  </div>\n</template>\n\n<script>\nimport XLSX from 'xlsx'\n\nexport default {\n  props: {\n    onSuccess: {\n      type: Function,\n      required: true\n    }\n  },\n  data() {\n    return {\n      excelData: {\n        header: null,\n        results: null,\n        meta: null,\n      }\n    }\n  },\n  methods: {\n    generateData({ header, results, meta }) {\n      this.excelData.header = header\n      this.excelData.results = results\n      this.excelData.meta = meta\n      this.onSuccess && this.onSuccess(this.excelData)\n    },\n    getHeaderRow(sheet) {\n      const headers = []\n      const range = XLSX.utils.decode_range(sheet['!ref'])\n      let C\n      const R = range.s.r\n      /* start in the first row */\n      for (C = range.s.c; C <= range.e.c; ++C) { /* walk every column in the range */\n        const cell = sheet[XLSX.utils.encode_cell({ c: C, r: R })]\n        /* find the cell in the first row */\n        let hdr = 'UNKNOWN ' + C // <-- replace with your desired default\n        if (cell && cell.t) hdr = XLSX.utils.format_cell(cell)\n        headers.push(hdr)\n      }\n      return headers\n    },\n    handleDragover(e) {\n      e.stopPropagation()\n      e.preventDefault()\n      e.dataTransfer.dropEffect = 'copy'\n    },\n    handleDrop(e) {\n      e.stopPropagation()\n      e.preventDefault()\n      const files = e.dataTransfer.files\n      if (files.length !== 1) {\n        this.$vs.notify({\n            title: 'Login Attempt',\n            text: 'Only support uploading one file!',\n            iconPack: 'feather',\n            icon: 'icon-alert-circle',\n            color: 'warning'\n        })\n        return\n      }\n      const rawFile = files[0] // only use files[0]\n      if (!this.isExcel(rawFile)) {\n        this.$vs.notify({\n            title: 'Login Attempt',\n            text: 'Only supports upload .xlsx, .xls, .csv suffix files',\n            iconPack: 'feather',\n            icon: 'icon-alert-circle',\n            color: 'warning'\n        })\n        return false\n      }\n      this.uploadFile(rawFile)\n    },\n    readerData(rawFile) {\n      return new Promise((resolve) => {\n        const reader = new FileReader()\n        reader.onload = e => {\n          const data = e.target.result\n          const workbook = XLSX.read(data, { type: 'array' })\n          const firstSheetName = workbook.SheetNames[0]\n          const worksheet = workbook.Sheets[firstSheetName]\n          const header = this.getHeaderRow(worksheet)\n          const results = XLSX.utils.sheet_to_json(worksheet)\n          const meta = { sheetName: firstSheetName }\n          this.generateData({ header, results, meta })\n          resolve()\n        }\n        reader.readAsArrayBuffer(rawFile)\n      })\n    },\n    handleClick(e) {\n      const files = e.target.files\n      const rawFile = files[0]\n      if (!rawFile) return\n      this.uploadFile(rawFile)\n    },\n    isExcel(file) {\n      return /\\.(xlsx|xls|csv)$/.test(file.name)\n    },\n    uploadFile(file) {\n      this.$refs['fileInput'].value = null // fix can't select the same excel\n      this.readerData(file)\n    }\n\n  }\n}\n</script>\n"]}]}